Get the input postfix expression and construct an expression tree.
Traverse the constructed Expression tree by Inorder, Preorder and Postorder methods.
 [Note:- Each character corresponds to a number or an operator. Use only single digit numbers.]
 
 #include<stdio.h>
#include<stdlib.h>


struct tree
{
char data;
struct tree *left;
struct tree *right;
};

struct tree *stack[30];
int top=-1;

struct tree * newnode(char b);
void push(struct tree * temp);
struct tree * pop();
void inorder(struct tree * t);
void preorder(struct tree * t);
void postorder(struct tree * t);

int main()
{
char a[30];
struct tree * temp;
int i;
printf("Enter the postfix expression:\n");
scanf("%s",a);
for(i=0;a[i]!='\0';i++)
{
if(a[i]=='*' || a[i]=='/' || a[i]=='+' || a[i]=='-')
{
temp=newnode(a[i]);
temp->right=pop();
temp->left=pop();
push(temp);
}
else
{
temp=newnode(a[i]);
push(temp);
}
}
printf("Inorder Traversal\n");
inorder(temp);
  printf("\n");
printf("Preorder Traversal\n");
preorder(temp);
    printf("\n");
printf("Postorder Traversal\n");
postorder(temp);
return 0;
}


struct tree * newnode(char b)
{
    struct tree *temp = (struct tree*)malloc(sizeof(struct tree));
    temp->data = b;
    temp->left = NULL;
    temp->right = NULL;
    return temp;
}
void push(struct tree * temp)
{
    if(top == 30)
        return;
    else{
        stack[++top] =  temp;
    }
  
}
struct tree * pop()
{
    if(top==-1)
    return NULL;
    
    struct tree *temp = stack[top];
    top--;
    return temp;
}

void inorder(struct tree * t)
{
    if(t!=NULL){
        inorder(t->left);
        printf(" %c",t->data);
        inorder(t->right);
    }
}


void preorder(struct tree * t)
{
    if(t!=NULL){
        printf(" %c",t->data);
        preorder(t->left);
        preorder(t->right);
    }
}

void postorder(struct tree * t)
{
    if(t!=NULL){
        postorder(t->left);
        postorder(t->right);
        printf(" %c",t->data);
    }
  
}
