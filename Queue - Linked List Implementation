Consider implementing a Circular Queue using a Linked List.

#include<stdio.h>
#include<stdlib.h>
struct node{
    int data;
    struct node *link;
};
void addcirq (struct node **f, struct node **r , int e){
    struct node *nn;
    nn = (struct node*)malloc(sizeof(struct node));
    nn->data = e;
    nn->link = NULL;
    if(*f == NULL){
        *f = nn;*r = nn;
        (*r)->link = *f;
    }
    else{
        (*r)->link = nn;
        (*r) = nn;
        nn->link = *f;
    }
}
int delcirq (struct node **f, struct node **r){
    if(*f == NULL){
        printf("Queue is empty\n");
        return -1000;
    }
    else if((*f)==(*r)){
        int n = (*f)->data;
        *f = NULL;
        *r = NULL;
        return n;
     }
     else{
         int n = (*f)->data;
         (*f) = (*f)->link;
         (*r)->link = *f;
         return n;
         
     }
}
void cirq_display (struct node *f){
    struct node *t = f;
    if(f == NULL){
        printf(" {}");
    }
    else{
    while(t->link != f){
        printf(" %d",t->data);
        t = t->link;
    }
    printf(" %d",t->data);
}
}
int main()
{
    int choice,ele,d;
    struct node *front=NULL;
    struct node *rear=NULL;
    do
    {
        printf("Choice 1 : Enter element into Queue\nChoice 2 : Delete element from Queue\nChoice 3 : Display\nAny other choice : Exit\n");
        printf("Enter your choice\n");
        scanf("%d\n",&choice);
        switch(choice)
        {
            case 1:
            printf("Enter the element to be inserted/entered\n");
            scanf("%d\n",&ele);
            addcirq(&front,&rear,ele);
            break;
            
            case 2:
            d=delcirq(&front,&rear);
            if(d!=-1000)
            {
                printf("The deleted element is %d\n",d);
            }
            break;
            
            case 3:
            printf("The contents of the queue are");
            cirq_display(front);
            printf("\n");
            break;
        }
    }while(choice<=3);
    return 0;
}
